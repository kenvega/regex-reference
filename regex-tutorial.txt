syntax

  the slashes at the start and end of regex are just to note the context
    you can think of them as quotation marks in strings: "hello world"

where to practice
  https://regexr.com/

rules
  matches are case sensitive
    searching for /z/ is not the same as searching for /Z/

  there are characters with special meanings that can't automatically be considered for the match
    example using /./ will not match the dots in your text automatically you will need to escape it

character codes

  [aeiou] - will match all vowels in your text 

  [^aeiou] - will match all that is not a vowel in your text (the character ^ negates it)

  [^aeiou][aeiou] - will match a non vowel followed inmediatly by a vowel (not vowels includes spaces and uppercase vowels/letters)

  [a-z] - range: will match any character between a lowercase and z lowercase

  [A-Z] - range: will match any character between a uppercase and z uppercase

  [A-Za-z] - range: will match any character between a and z being uppercase or lowercase

  [f-p] - range: will match any character between f lowercase and p lowercase

  . - matches every single character except for linebreaks

  \w - equivalent to this match [A-Za-z0-9_] -- it will match a character that are normally in a word

  \w\w\w\w\w\w - will match any valid word with 6 characters (doesn't include space but can include underscores)

  \d - matchs a single digit

  \d\d\d - will match any 3 digit number in your text

  \d[13579] - will match numbers like 13, 15, 19, 29, 77.. but not 42 (because first digit is number but second digit has to be a 1,3,5,7 or 9)

  \d\+\d=\d - will match something like 1+1=2 or 4+4=8 but not the whole 5+5=10 (because 10 is 2 digit)
            -- notice the '+' is escaped with a \ so that it is not treated as regular regex symbol

  \s - match any whitespace

  \s\s - match any two consecutives whitespaces

quantifiers

  +  --- matches anything that has at least 1 or more of the last character/token before the +

    ha+  --- will match: 'ha', 'haaa', 'haaAdf234', 'ahaa', 'ahaA'
         --- will not match: 'Ha' (case sensitive), or 'he' (there has to be at least 1 'a' to match)

  *  --- matches anything that has at least 0 or more of the last character/token before the *

    ha*  --- will match anything that ha+ matched in the last example
         --- but it will also match 'he' (because in this case there doesn't need to be at least 1 'a' to match)

  a{5} - equivalent to /aaaaa/ - will match where there are 5 a's next to one another

  \d{3} - equivalent to /\d\d\d/ - will match where there are 3 digits next to one another

  \d{3,4} - will match where there are 3 or 4 digits next to one another

  \d{3,} - will match where there are 3 or more digits next to one another

  !{3,} - will match where there are 3 or more '!' next to one another

  ? --- matches anything that has 0 or 1 (and not more) of the last character

    colou?r - will match color, colour, but will not match colouuur (because there has to be 0 or 1 'u' to match)

    colou*r - will match color, colour, and colouuuur (because it matches with 0 or more 'u')

    colou+r - will match colour, colouuur, but will not match color (because there has to be at least 1 'u' to match)

anchors

  ^your-match-here$ --- if you want to know if you have the exact match instead of just looking if your match is contained in the text

example

  given this match - ^[A-Z]{2}\s\d{5}

    ^[A-Z]{2} -- required start with 2 uppercase characters
    \s -- follow that with a required whitespace
    \d{5} -- follow with required 5 digits in a row

  which one is valid

    San Francisco CA 94103 - not valid because the start has to be 2 uppercase characters
    CO81611 - not valid because there is no space
    NY 10003 - valid
    MT 59868 CA 92657 - valid because of the start (the second part 'CA 92657' does not match because it is not at start)

what characters need to be escaped if you want them specifically in your text (and not work as normally they work in regex)

  +  *  ?  ^  $  \  .  [  ]  {  } (  ) | /

  to escape them you have to add a '\' before the character to escape

example where escaping characters is useful

  how will you match numbers in your text that may or may not have dollar sign at start and always have 2 decimal digits

    example of text: match all these

      10.50 $99.99 $42222.25

    solution

      \$?\d+\.\d{2}

        \$? --- match a dollar sign but optionall (can be or not. also notice it is escaped with '\')
        \d+ --- follow with 1 digit or more digits but there has to be at least one (notice it just matches numbers)
        \. --- exactly one '.' has to be there (notice it is escaped with '\')
        \d{2} --- exactly 2 digits has to follow

exercise

  write regex that match exponentials (integer numbers only) and support negative numbers
    4^2, 12^5, 3^1122, 5^-3, -15^6

    solution
      -?\d+\^-?\d+

        -?    --- matches 0 or more negative signs at the start
        \d+   --- matches at least one more digits in a row
        \^    --- matches a specific character '^' (notice it is escaped)
        -?\d+ --- matches again the first 2 patterns (support negatives and then integer numbers)

excercise

  write something that matches time formats (may or may not include seconds)

    23:50:32, 14:00, 23:00, 02:45, 2:45, 9:30:01, 19:30

    solution:
      \b([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?

        \b --- makes sure you don't 

where can I find already created patterns for common things like url, addresses, phone numbers, etc

  at https://regexr.com/ go to community patterns there are some already created patterns

  also look at posts of other already created regex patterns


source:
  https://www.youtube.com/watch?v=EiRGUNrz9MY
  https://www.notion.so/Intro-to-Regular-Expressions-853550f27e6a447b8f552499ff6c4bfd